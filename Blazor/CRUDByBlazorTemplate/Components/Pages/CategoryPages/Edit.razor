@page "/categories/edit/{Id}"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using CRUDByBlazorTemplate.Models
@using CRUDByBlazorTemplate.Services
@using CRUDByBlazorTemplate.Request
@using CRUDByBlazorTemplate.Response
@using CRUDByBlazorTemplate.Dtos
@inject ICategoryService _categoryService
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<PageTitle>Categorias</PageTitle>

<MudContainer Class="gap-12 d-flex flex-column justify-content-around h-auto"
              MaxWidth="MaxWidth.Large">

    <MudText Typo="Typo.h4">Editar categorias</MudText>

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm Model="category"
                         @ref="form">
                    <MudTextField @bind-Value="title"
                                  Variant="Variant.Outlined"
                                  T="string"
                                  Label="Título"
                                  Required="true"
                                  RequiredError="O título é obrigatório!" />

                    <MudTextField @bind-Value="description"
                                  T="string"
                                  Label="Descrição"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  Lines="5"
                                  RequiredError="A descrição é obrigatório!" />
                </MudForm>

                <MudButton Disabled="@_processing"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           DropShadow="false"
                           OnClick="@(async () => await SaveCategory())">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2 text-uppercase">Processando</MudText>
                    }
                    else
                    {
                        <MudText Class="text-uppercase">Salvar</MudText>
                    }
                </MudButton>
            </MudPaper>

        </MudItem>

    </MudGrid>

</MudContainer>



@code {

    [Parameter]
    public string Id { get; set; }

    MudForm form;
    Category category;
    string title = string.Empty;
    private bool _processing = false;
    string description;



    private bool _isDisposed;

    protected override async Task OnInitializedAsync()
    {
        await OnLoad();
    }

    public async Task<CategoryByIdResponse> GetCategoryById(Guid id)
    {
        var response = await _categoryService.GetById(id);

        return (CategoryByIdResponse)response.Content;

    }

    public async Task OnLoad()
    {

        var categoryResponse = await GetCategoryById(Guid.Parse(Id));

        title = categoryResponse.CategoryDto.Title;
        description = categoryResponse.CategoryDto.Description;

    }

    public async Task<object> SaveCategory()
    {

        await form.Validate();
        _processing = true;

        var categoryRequest = new CategoryRequest
            {
                Title = title,
                Description = description
            };
        var res = await _categoryService.Patch(Guid.Parse(Id), categoryRequest);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;


        await Task.Delay(400);
        _processing = false;

        if (res.StatusCode == System.Net.HttpStatusCode.OK)
        {


            Snackbar.Add("Sucesso", Severity.Success, (options) =>
            {
                options.CloseAfterNavigation = true;
            });
            await Task.Delay(400);
            NavigationManager.NavigateTo("/categories");


        }
        else
        {

            Snackbar.Add(res.Message, Severity.Error, (options) =>
            {
                options.CloseAfterNavigation = true;
            });

        }

        StateHasChanged();

        return res.Content;


    }

}
