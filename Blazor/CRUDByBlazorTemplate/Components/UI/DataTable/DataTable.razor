@using CRUDByBlazorTemplate.Dtos
@using System.Reflection
@using CRUDByBlazorTemplate.Components.UI.Dialog
@inject IDialogService DialogService

@implements IDisposable

@typeparam T where T : BaseDto

<MudDataGrid T="T"
             Ref="@grid"
             Filterable="false"
             Virtualize="true"
             ServerData="OnLoad">
    <ToolBarContent>
        <MudTextField Placeholder="Busque um registro"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0" />
    </ToolBarContent>

    <Columns>
        @if (DataTableVM.Itens != null)
        {
            foreach (var header in DataTableVM.Headers)
            {
                var prop = typeof(T).GetProperty(header.PropName);

                if (prop != null)
                {
                    if (header.PropName.Equals("Id"))
                    {
                        <TemplateColumn>
                            <CellTemplate>
                                <MudStack Row>
                                    <MudIconButton OnClick="@(() => Navigate((Guid)context.Item.Id))"
                                    Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning" Size="@Size.Small" />

                                    <MudIconButton OnClick="@(() => OnDelete((Guid)context.Item.Id))"
                                    Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" Size="@Size.Small" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    }
                    else
                    {
                        <PropertyColumn T="T"
                        TProperty="object"
                        Sortable="false"
                        Filterable="false"
                        Title="@header.Header"
                        Property="@(item => prop.GetValue(item))" />
                    }
                }
            }
        }
    </Columns>

    <NoRecordsContent>
        Nenhum registro encontrado
    </NoRecordsContent>

    <PagerContent>
        <MudDataGridPager ShowPageNumber="true"
        PageSizeSelector="false"
        ShowNavigation="true">
        </MudDataGridPager>
    </PagerContent>
</MudDataGrid>

@code {
    private bool _isDisposed;
    private MudDataGrid<T> grid;

    [Parameter]
    public ViewModel<T> DataTableVM { get; set; } = default;

    [Parameter]
    public Func<int, Task<GridData<T>>> GetData { get; set; }

    [Parameter]
    public Func<Guid, Task> NavigateToEdit { get; set; }

    [Parameter]
    public Func<Guid, Task> DeleteData { get; set; }

    protected override void OnInitialized()
    {
        _isDisposed = false;
    }

    public async Task<GridData<T>> OnLoad(GridState<T> state)
    {
        if (_isDisposed)
        {
            return new GridData<T>();
        }

        return await GetData(state.Page);
    }

    public async Task OnDelete(Guid Id)
    {
        var parameters = new DialogParameters<Dialog>
        {
            { x => x.ContentText, "Deseja realmente excluir este registro?" },
            { x => x.ButtonText, "Excluir" },
            { x => x.Color, Color.Error },
            { x => x.Action, async () => 
                {
                    await DeleteHandle(Id);
                }
            }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        await DialogService.ShowAsync<Dialog>("Excluir", parameters, options);

    }

    public async Task DeleteHandle(Guid Id)
    {
        await DeleteData(Id);
        StateHasChanged();
        await grid.ReloadServerData();
    }

    public void Navigate(Guid id)
    {
        NavigateToEdit(id);
    }

    public void Dispose()
    {
        _isDisposed = true;
    }
}
