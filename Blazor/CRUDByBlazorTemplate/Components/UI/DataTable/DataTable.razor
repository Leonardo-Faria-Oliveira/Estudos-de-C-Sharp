@using CRUDByBlazorTemplate.Dtos
@using System.Reflection
@implements IDisposable

@typeparam T where T : BaseDto

<MudDataGrid T="T"
             Filterable="false"
             Virtualize="true"
             ServerData="OnLoad">
    <ToolBarContent>
        <MudTextField Placeholder="Busque um registro"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="Size.Medium"
        Class="mt-0" />
    </ToolBarContent>

    <Columns>
        @if (DataTableVM.Itens != null)
        {
            foreach (var header in DataTableVM.Headers)
            {
                var prop = typeof(T).GetProperty(header.PropName);

                if (prop != null)
                {
                    <PropertyColumn T="T" TProperty="object"
                    Title="@header.Header"
                    Property="@(item => prop.GetValue(item))" 
                    />
                }
            }
        }
    </Columns>

    <NoRecordsContent>
        Nenhum registro encontrado
    </NoRecordsContent>

    <PagerContent>
        <MudDataGridPager 
        ShowPageNumber="true"
        PageSizeSelector="false"
        ShowNavigation="true">
        </MudDataGridPager>
    </PagerContent>

</MudDataGrid>

@code {

    private bool _isDisposed;

    [Parameter]
    public ViewModel<T> DataTableVM { get; set; } = default;

    [Parameter]
    public Func<int, Task<GridData<T>>> GetData { get; set; }

    protected override void OnInitialized()
    {
        _isDisposed = false;
    }

    public async Task<GridData<T>> OnLoad(GridState<T> state)
    {
        if (_isDisposed)
        {
            return new GridData<T>();
        }

        return await GetData(state.Page); 
       
    }

    public void Dispose()
    {
        _isDisposed = true;
    }
}
